// Generated by CoffeeScript 1.4.0
var BasePlugin, balUtil;

balUtil = require('bal-util');

BasePlugin = (function() {

  BasePlugin.prototype.docpad = null;

  BasePlugin.prototype.name = null;

  BasePlugin.prototype.config = {};

  BasePlugin.prototype.priority = 500;

  function BasePlugin(opts) {
    var config, configPackage, configPackages, configsToMerge, docpad, env, envConfig, envs, me, _i, _j, _len, _len1, _ref;
    me = this;
    docpad = opts.docpad, config = opts.config;
    this.docpad = docpad;
    envs = this.docpad.getEnvironments();
    configPackages = [this.config, config];
    configsToMerge = [{}];
    for (_i = 0, _len = configPackages.length; _i < _len; _i++) {
      configPackage = configPackages[_i];
      configsToMerge.push(configPackage);
      for (_j = 0, _len1 = envs.length; _j < _len1; _j++) {
        env = envs[_j];
        envConfig = (_ref = configPackage.environments) != null ? _ref[env] : void 0;
        if (envConfig) {
          configsToMerge.push(envConfig);
        }
      }
    }
    this.config = balUtil.deepExtendPlainObjects.apply(balUtil, configsToMerge);
    if (this.isEnabled() === false) {
      return this;
    }
    this.bindEvents();
    this;

  }

  BasePlugin.prototype.bindEvents = function() {
    var docpad, events, pluginInstance;
    pluginInstance = this;
    docpad = this.docpad;
    events = docpad.getEvents();
    balUtil.each(events, function(eventName) {
      var eventHandler;
      if (balUtil.isFunction(pluginInstance[eventName])) {
        eventHandler = pluginInstance[eventName];
        return docpad.on(eventName, function(opts, next) {
          if (pluginInstance.isEnabled() === false) {
            return next();
          }
          return balUtil.fireWithOptionalCallback(eventHandler, [opts, next], pluginInstance);
        });
      }
    });
    return this;
  };

  BasePlugin.prototype.isEnabled = function() {
    return this.config.enabled !== false;
  };

  return BasePlugin;

})();

module.exports = BasePlugin;
