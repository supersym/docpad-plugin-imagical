// Generated by CoffeeScript 1.4.0
var Backbone, FileModel, Model, balUtil, mime, pathUtil, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

pathUtil = require('path');

balUtil = require('bal-util');

mime = require('mime');

_ref = require(__dirname + '/../base'), Backbone = _ref.Backbone, Model = _ref.Model;

FileModel = (function(_super) {

  __extends(FileModel, _super);

  function FileModel() {
    return FileModel.__super__.constructor.apply(this, arguments);
  }

  FileModel.prototype.outDirPath = null;

  FileModel.prototype.type = 'file';

  FileModel.prototype.stat = null;

  FileModel.prototype.data = null;

  FileModel.prototype.buffer = null;

  FileModel.prototype.meta = null;

  FileModel.prototype.defaults = {
    id: null,
    basename: null,
    extension: null,
    outExtension: null,
    extensions: null,
    filename: null,
    path: null,
    outPath: null,
    dirPath: null,
    outDirPath: null,
    outFilename: null,
    relativePath: null,
    relativeOutPath: null,
    relativeDirPath: null,
    relativeOutDirPath: null,
    relativeBase: null,
    contentType: null,
    outContentType: null,
    ctime: null,
    mtime: null,
    encoding: null,
    source: null,
    content: null,
    title: null,
    name: null,
    date: null,
    slug: null,
    url: null,
    urls: null,
    ignored: false,
    standalone: false
  };

  FileModel.prototype.setData = function(data) {
    this.data = data;
    return this;
  };

  FileModel.prototype.getData = function() {
    return this.data;
  };

  FileModel.prototype.setBuffer = function(buffer) {
    this.buffer = buffer;
    return this;
  };

  FileModel.prototype.getBuffer = function() {
    return this.buffer;
  };

  FileModel.prototype.setStat = function(stat) {
    this.stat = stat;
    this.set({
      ctime: new Date(stat.ctime),
      mtime: new Date(stat.mtime)
    });
    return this;
  };

  FileModel.prototype.getStat = function() {
    return this.stat;
  };

  FileModel.prototype.getAttributes = function() {
    return this.toJSON();
  };

  FileModel.prototype.getMeta = function() {
    if (this.meta === null) {
      this.meta = new Model();
    }
    return this.meta;
  };

  FileModel.prototype.setMeta = function(attrs) {
    this.getMeta().set(attrs);
    this.set(attrs);
    return this;
  };

  FileModel.prototype.setMetaDefaults = function(defaults) {
    this.getMeta().setDefaults(defaults);
    this.setDefaults(defaults);
    return this;
  };

  FileModel.prototype.getContent = function() {
    return this.get('content') || this.getBuffer();
  };

  FileModel.prototype.getOutContent = function() {
    return this.getContent();
  };

  FileModel.prototype.isText = function() {
    return this.get('encoding') !== 'binary';
  };

  FileModel.prototype.isBinary = function() {
    return this.get('encoding') === 'binary';
  };

  FileModel.prototype.setUrl = function(url) {
    this.addUrl(url);
    this.set({
      url: url
    });
    return this;
  };

  FileModel.prototype.addUrl = function(url) {
    var existingUrl, found, newUrl, urls, _i, _j, _len, _len1;
    if (url instanceof Array) {
      for (_i = 0, _len = url.length; _i < _len; _i++) {
        newUrl = url[_i];
        this.addUrl(newUrl);
      }
    } else if (url) {
      found = false;
      urls = this.get('urls');
      for (_j = 0, _len1 = urls.length; _j < _len1; _j++) {
        existingUrl = urls[_j];
        if (existingUrl === url) {
          found = true;
          break;
        }
      }
      if (!found) {
        urls.push(url);
      }
    }
    return this;
  };

  FileModel.prototype.removeUrl = function(userUrl) {
    var index, url, urls, _i, _len;
    urls = this.get('urls');
    for (index = _i = 0, _len = urls.length; _i < _len; index = ++_i) {
      url = urls[index];
      if (url === userUrl) {
        urls.remove(index);
        break;
      }
    }
    return this;
  };

  FileModel.prototype.getPath = function(relativePath, parentPath) {
    var path, relativeDirPath;
    if (/^\./.test(relativePath)) {
      relativeDirPath = this.get('relativeDirPath');
      path = pathUtil.join(relativeDirPath, relativePath);
    } else {
      if (parentPath) {
        path = pathUtil.join(parentPath, relativePath);
      } else {
        path = relativePath;
      }
    }
    return path;
  };

  FileModel.prototype.initialize = function(attrs, opts) {
    var data, defaults, meta, outDirPath, stat;
    outDirPath = opts.outDirPath, stat = opts.stat, data = opts.data, meta = opts.meta;
    if (attrs.data != null) {
      data = attrs.data;
      delete attrs.data;
      delete this.attributes.data;
    }
    defaults = {
      extensions: [],
      urls: [],
      id: this.cid
    };
    if (outDirPath) {
      this.outDirPath = outDirPath;
    }
    if (data) {
      this.setData(data);
    }
    if (stat) {
      this.setStat(stat);
    } else {
      defaults.ctime = new Date();
      defaults.mtime = new Date();
    }
    this.set(defaults);
    if (meta) {
      this.setMeta(meta);
    }
    return FileModel.__super__.initialize.apply(this, arguments);
  };

  FileModel.prototype.getActionArgs = function(opts, next) {
    if (balUtil.isFunction(opts) && (next != null) === false) {
      next = opts;
      opts = {};
    } else {
      opts || (opts = {});
    }
    next || (next = opts.next || null);
    return {
      next: next,
      opts: opts
    };
  };

  FileModel.prototype.load = function(opts, next) {
    var file, filePath, fullPath, tasks, _ref1,
      _this = this;
    if (opts == null) {
      opts = {};
    }
    _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
    file = this;
    fullPath = this.get('fullPath');
    if (!fullPath) {
      filePath = this.get('relativePath') || this.get('fullPath') || this.get('filename');
      fullPath = this.get('fullPath') || filePath || null;
      file.set({
        fullPath: fullPath
      });
    }
    file.log('debug', "Loading the file: " + fullPath);
    tasks = new balUtil.Group(function(err) {
      if (err) {
        return next(err);
      }
      file.log('debug', "Loaded the file: " + fullPath);
      return file.parse(function(err) {
        if (err) {
          return next(err);
        }
        return file.normalize(function(err) {
          if (err) {
            return next(err);
          }
          return next(null, file.buffer);
        });
      });
    });
    tasks.push(function(complete) {
      var buffer, data;
      data = file.getData();
      if (data) {
        buffer = new Buffer(data);
        file.setBuffer(buffer);
        return tasks.exit();
      } else {
        return complete();
      }
    });
    tasks.push(function(complete) {
      if (opts.stat) {
        file.setBuffer(opts.stat);
        return complete();
      }
      return balUtil.stat(fullPath, function(err, fileStat) {
        if (err) {
          return complete(err);
        }
        file.setStat(fileStat);
        return complete();
      });
    });
    tasks.push(function(complete) {
      if (opts.buffer) {
        file.setBuffer(opts.buffer);
        return complete();
      }
      return balUtil.readFile(fullPath, function(err, buffer) {
        if (err) {
          return complete(err);
        }
        file.setBuffer(buffer);
        return complete();
      });
    });
    tasks.sync();
    return this;
  };

  FileModel.prototype.parse = function(opts, next) {
    var buffer, content, encoding, fullPath, isText, source, _ref1;
    if (opts == null) {
      opts = {};
    }
    _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
    buffer = this.getBuffer();
    fullPath = this.get('fullPath');
    encoding = this.get('encoding');
    if (!encoding) {
      isText = balUtil.isTextSync(fullPath, buffer);
      if (isText) {
        encoding = 'utf8';
      } else {
        encoding = 'binary';
      }
    }
    if (encoding === 'utf8') {
      source = buffer.toString(encoding);
    } else {
      source = '';
    }
    content = source.replace(/\r\n?/gm, '\n').replace(/\t/g, '    ');
    this.set({
      source: source,
      content: content,
      encoding: encoding
    });
    next();
    return this;
  };

  FileModel.prototype.normalize = function(opts, next) {
    var basename, changes, contentType, date, extension, extensions, filename, fullDirPath, fullPath, id, meta, mtime, relativeBase, relativeDirPath, relativePath, _ref1;
    if (opts == null) {
      opts = {};
    }
    _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
    changes = {};
    meta = this.getMeta();
    basename = this.get('basename');
    filename = this.get('filename');
    fullPath = this.get('fullPath');
    extensions = this.get('extensions');
    relativePath = this.get('relativePath');
    mtime = this.get('mtime');
    date = meta.get('date') || null;
    if (fullPath) {
      changes.filename = filename = pathUtil.basename(fullPath);
      changes.outFilename = filename;
    }
    if (filename) {
      if (filename[0] === '.') {
        basename = filename.replace(/^(\.[^\.]+)\..*$/, '$1');
      } else {
        basename = filename.replace(/\..*$/, '');
      }
      changes.basename = basename;
      if ((extensions != null) === false || extensions.length === 0) {
        extensions = filename.split(/\./g);
        extensions.shift();
      }
      changes.extensions = extensions;
      if (extensions.length) {
        extension = extensions[extensions.length - 1];
      } else {
        extension = null;
      }
      changes.extension = extension;
      changes.outExtension = extension;
    }
    if (fullPath) {
      changes.fullDirPath = fullDirPath = pathUtil.dirname(fullPath) || '';
      changes.contentType = contentType = mime.lookup(fullPath);
      changes.outContentType = contentType;
    }
    if (relativePath) {
      changes.relativeDirPath = relativeDirPath = pathUtil.dirname(relativePath).replace(/^\.$/, '') || '';
      changes.relativeBase = relativeBase = relativeDirPath ? pathUtil.join(relativeDirPath, basename) : basename;
      changes.id = id = relativePath;
    }
    if (!date && mtime) {
      changes.date = date = mtime;
    }
    this.set(changes);
    next();
    return this;
  };

  FileModel.prototype.contextualize = function(opts, next) {
    var changes, filename, meta, name, outDirPath, outPath, relativeBase, relativeDirPath, relativeOutDirPath, relativeOutPath, relativePath, slug, url, _ref1;
    if (opts == null) {
      opts = {};
    }
    _ref1 = this.getActionArgs(opts, next), opts = _ref1.opts, next = _ref1.next;
    changes = {};
    meta = this.getMeta();
    relativePath = this.get('relativePath');
    relativeDirPath = this.get('relativeDirPath');
    relativeBase = this.get('relativeBase');
    filename = this.get('filename');
    outPath = this.get('outPath');
    outDirPath = this.get('outDirPath');
    name = meta.get('name') || null;
    slug = meta.get('slug') || null;
    url = meta.get('url') || null;
    if (!url && relativePath) {
      url = "/" + relativePath;
      this.setUrl(url);
    }
    if (!slug && relativeBase) {
      changes.slug = slug = balUtil.generateSlugSync(relativeBase);
    }
    if (!name && filename) {
      changes.name = name = filename;
    }
    if (this.outDirPath && relativePath) {
      if (relativeDirPath != null) {
        changes.relativeOutDirPath = relativeOutDirPath = relativeDirPath;
      }
      changes.relativeOutPath = relativeOutPath = relativePath;
      changes.outPath = outPath = pathUtil.join(this.outDirPath, relativePath);
      if (outPath) {
        changes.outDirPath = outDirPath = pathUtil.dirname(outPath);
      }
    }
    this.set(changes);
    next();
    return this;
  };

  FileModel.prototype.write = function(next) {
    var content, encoding, file, fileOutPath;
    file = this;
    fileOutPath = this.get('outPath');
    encoding = this.get('encoding');
    content = this.getContent();
    if (!fileOutPath) {
      next();
      return this;
    }
    file.log('debug', "Writing the file: " + fileOutPath + " " + encoding);
    balUtil.writeFile(fileOutPath, content, encoding, function(err) {
      if (err) {
        return next(err);
      }
      file.log('debug', "Wrote the file: " + fileOutPath + " " + encoding);
      return next();
    });
    return this;
  };

  FileModel.prototype["delete"] = function(next) {
    var file, fileOutPath;
    file = this;
    fileOutPath = this.get('outPath');
    if (!fileOutPath) {
      next();
      return this;
    }
    file.log('debug', "Delete the file: " + fileOutPath);
    balUtil.exists(fileOutPath, function(exists) {
      if (!exists) {
        return next();
      }
      return balUtil.unlink(fileOutPath, function(err) {
        if (err) {
          return next(err);
        }
        file.log('debug', "Deleted the file: " + fileOutPath);
        return next();
      });
    });
    return this;
  };

  return FileModel;

})(Model);

module.exports = FileModel;
