// Generated by CoffeeScript 1.4.0
var ElementsCollection, ScriptsCollection, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

ElementsCollection = require(__dirname + '/elements');

ScriptsCollection = (function(_super) {

  __extends(ScriptsCollection, _super);

  function ScriptsCollection() {
    return ScriptsCollection.__super__.constructor.apply(this, arguments);
  }

  ScriptsCollection.prototype.add = function(values, opts) {
    var attrs, key, value, _i, _len, _ref;
    opts || (opts = {});
    if ((_ref = opts.defer) == null) {
      opts.defer = true;
    }
    if (!_.isArray(values)) {
      values = [values];
    }
    attrs = '';
    if (opts.defer) {
      attrs += "defer=\"defer\" ";
    }
    for (key = _i = 0, _len = values.length; _i < _len; key = ++_i) {
      value = values[key];
      if (_.isString(value)) {
        if (value[0] === '<') {

        } else if (value.indexOf(' ') === -1) {
          values[key] = "<script " + attrs + " src=\"" + value + "\"></script>";
        } else {
          values[key] = "<script " + attrs + ">" + value + "</script>";
        }
      }
    }
    return ScriptsCollection.__super__.add.call(this, values, opts);
  };

  return ScriptsCollection;

})(ElementsCollection);

module.exports = ScriptsCollection;
