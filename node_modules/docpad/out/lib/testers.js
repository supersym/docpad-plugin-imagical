// Generated by CoffeeScript 1.4.0
var CSON, DocPad, PluginTester, RendererTester, ServerTester, assert, balUtil, chai, expect, joe, pathUtil, pluginPort, request, test, testers, underscore, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

pathUtil = require('path');

_ = underscore = require('underscore');

balUtil = require('bal-util');

joe = require('joe');

chai = require('chai');

expect = chai.expect;

assert = chai.assert;

request = require('request');

CSON = require('cson');

DocPad = require(__dirname + '/docpad');

pluginPort = 2000 + process.pid;

testers = {
  underscore: underscore,
  balUtil: balUtil,
  chai: chai,
  expect: expect,
  assert: assert,
  request: request,
  CSON: CSON,
  DocPad: DocPad
};

testers.PluginTester = PluginTester = (function() {

  PluginTester.prototype.chai = chai;

  PluginTester.prototype.expect = expect;

  PluginTester.prototype.assert = assert;

  PluginTester.prototype.config = {
    pluginName: null,
    pluginPath: null,
    outExpectedPath: null,
    autoExit: true
  };

  PluginTester.prototype.docpadConfig = {
    port: null,
    growl: false,
    logLevel: ((__indexOf.call(process.argv, '-d') >= 0) ? 7 : 5),
    rootPath: null,
    pluginPaths: null,
    enableUnlistedPlugins: false,
    enabledPlugins: null,
    skipUnsupportedPlugins: false,
    catchExceptions: false
  };

  PluginTester.prototype.docpad = null;

  PluginTester.prototype.logger = null;

  function PluginTester(config) {
    var defaultEnabledPlugins, tester, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _ref, _ref1;
    if (config == null) {
      config = {};
    }
    tester = this;
    this.config = balUtil.deepExtendPlainObjects({}, PluginTester.prototype.config, this.config, config);
    this.docpadConfig = balUtil.deepExtendPlainObjects({}, PluginTester.prototype.docpadConfig, this.docpadConfig);
    if ((_ref = (_base = this.docpadConfig).port) == null) {
      _base.port = ++pluginPort;
    }
    joe.describe(this.config.pluginName, function(suite, task, complete) {
      tester.describe = tester.suite = suite;
      tester.it = tester.test = task;
      return tester.done = tester.exit = complete;
    });
    (_base1 = this.config).testPath || (_base1.testPath = pathUtil.join(this.config.pluginPath, 'test'));
    (_base2 = this.config).outExpectedPath || (_base2.outExpectedPath = pathUtil.join(this.config.testPath, 'out-expected'));
    (_base3 = this.docpadConfig).rootPath || (_base3.rootPath = this.config.testPath);
    (_base4 = this.docpadConfig).outPath || (_base4.outPath = pathUtil.join(this.docpadConfig.rootPath, 'out'));
    (_base5 = this.docpadConfig).srcPath || (_base5.srcPath = pathUtil.join(this.docpadConfig.rootPath, 'src'));
    if ((_ref1 = (_base6 = this.docpadConfig).pluginPaths) == null) {
      _base6.pluginPaths = [this.config.pluginPath];
    }
    defaultEnabledPlugins = {};
    defaultEnabledPlugins[this.config.pluginName] = true;
    (_base7 = this.docpadConfig).enabledPlugins || (_base7.enabledPlugins = defaultEnabledPlugins);
  }

  PluginTester.prototype.testCreate = function() {
    var docpadConfig, tester;
    tester = this;
    docpadConfig = this.docpadConfig;
    this.test("create", function(done) {
      return tester.docpad = DocPad.createInstance(docpadConfig, function(err) {
        if (err) {
          return done(err);
        }
        tester.logger = tester.docpad.logger;
        return tester.docpad.action('clean', function(err) {
          if (err) {
            return done(err);
          }
          return tester.docpad.action('install', function(err) {
            return done(err);
          });
        });
      });
    });
    return this;
  };

  PluginTester.prototype.testLoad = function() {
    var tester;
    tester = this;
    this.test("load plugin " + tester.config.pluginName, function(done) {
      return tester.docpad.loadedPlugin(tester.config.pluginName, function(err, loaded) {
        if (err) {
          return done(err);
        }
        expect(loaded).to.be.ok;
        return done();
      });
    });
    return this;
  };

  PluginTester.prototype.testServer = function(next) {
    var tester;
    tester = this;
    this.test("server", function(done) {
      return tester.docpad.action('server', function(err) {
        return done(err);
      });
    });
    return this;
  };

  PluginTester.prototype.testGenerate = function() {
    var tester;
    tester = this;
    this.test("generate", function(done) {
      return tester.docpad.action('generate', function(err) {
        return done(err);
      });
    });
    return this;
  };

  PluginTester.prototype.testEverything = function() {
    var tester;
    tester = this;
    this.testCreate();
    this.testLoad();
    this.testGenerate();
    this.testServer();
    if (typeof this.testCustom === "function") {
      this.testCustom();
    }
    this.finish();
    return this;
  };

  PluginTester.prototype.finish = function() {
    var tester;
    tester = this;
    if (tester.config.autoExit) {
      this.test('finish up', function(done) {
        done();
        tester.exit();
        return process.exit();
      });
    }
    return this;
  };

  return PluginTester;

})();

testers.ServerTester = ServerTester = (function(_super) {

  __extends(ServerTester, _super);

  function ServerTester() {
    return ServerTester.__super__.constructor.apply(this, arguments);
  }

  return ServerTester;

})(PluginTester);

testers.RendererTester = RendererTester = (function(_super) {

  __extends(RendererTester, _super);

  function RendererTester() {
    return RendererTester.__super__.constructor.apply(this, arguments);
  }

  RendererTester.prototype.testGenerate = function() {
    var tester;
    tester = this;
    this.suite("generate", function(suite, test) {
      test('action', function(done) {
        return tester.docpad.action('generate', function(err) {
          return done(err);
        });
      });
      return test('results', function(done) {
        return balUtil.scantree(tester.docpadConfig.outPath, function(err, outResults) {
          if (err) {
            return done(err);
          }
          return balUtil.scantree(tester.config.outExpectedPath, function(err, outExpectedResults) {
            if (err) {
              return done(err);
            }
            expect(outResults).to.eql(outExpectedResults);
            return done();
          });
        });
      });
    });
    return this;
  };

  return RendererTester;

})(PluginTester);

testers.test = test = function(pluginDetails) {
  var testerClass, testerInstance, _ref, _ref1;
  pluginDetails.pluginPath = pathUtil.resolve(pluginDetails.pluginPath);
  if ((_ref = pluginDetails.pluginName) == null) {
    pluginDetails.pluginName = pathUtil.basename(pluginDetails.pluginPath);
  }
  if ((_ref1 = pluginDetails.testerPath) == null) {
    pluginDetails.testerPath = pathUtil.join('out', "" + pluginDetails.pluginName + ".tester.js");
  }
  pluginDetails.testerPath = pathUtil.resolve(pluginDetails.pluginPath, pluginDetails.testerPath);
  testerClass = require(pluginDetails.testerPath)(testers);
  testerInstance = new testerClass({
    pluginName: pluginDetails.pluginName,
    pluginPath: pluginDetails.pluginPath
  });
  testerInstance.testEverything();
  return this;
};

module.exports = testers;
