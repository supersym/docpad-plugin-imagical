// Generated by CoffeeScript 1.3.3
(function() {
  var catalog, catalogFile, collectResources, fs, getCatalog, grabResources, makeList, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  fs = require('fs');

  catalogFile = '.build-catalog.json';

  catalog = null;

  getCatalog = function() {
    if (catalog) {
      return catalog;
    }
    if (fs.existsSync(catalogFile)) {
      try {
        catalog = JSON.parse(fs.readFileSync(catalogFile, 'utf8'));
      } catch (e) {

      }
    }
    return catalog;
  };

  makeList = function(str) {
    if (_.isString(str)) {
      _.compact(str.split(/\s*,\s*/));
    }
    return str;
  };

  grabResources = function(collection, prefix) {
    var k, re, res, v;
    res = {};
    re = new RegExp('^' + prefix + '(\\d+)?$');
    for (k in collection) {
      v = collection[k];
      if (re.test(k)) {
        res[k] = v;
      }
    }
    return res;
  };

  collectResources = function(documentModel, prefix) {
    var assets, ctx, files, k, m, order, r, res, v;
    files = [grabResources(documentModel.getMeta().toJSON(), prefix)];
    ctx = documentModel;
    while (ctx.hasLayout()) {
      ctx = ctx.layout;
      files.push(grabResources(ctx.getMeta().toJSON(), prefix));
    }
    res = {};
    while (r = files.pop()) {
      _.extend(res, r);
    }
    assets = (function() {
      var _results;
      _results = [];
      for (k in res) {
        v = res[k];
        order = -1;
        if (m = /(\d+)$/.test(k)) {
          order = parseInt(m[1]);
        }
        _results.push({
          order: order,
          files: makeList(v)
        });
      }
      return _results;
    })();
    assets.sort(function(a, b) {
      return a.order - b.order;
    });
    assets = _.flatten(assets.map(function(item) {
      return item.files;
    }));
    return _.uniq(_.compact(assets));
  };

  module.exports = function(BasePlugin) {
    var FrontendAssetsPlugin;
    return FrontendAssetsPlugin = (function(_super) {

      __extends(FrontendAssetsPlugin, _super);

      function FrontendAssetsPlugin() {
        return FrontendAssetsPlugin.__super__.constructor.apply(this, arguments);
      }

      FrontendAssetsPlugin.prototype.name = 'frontend';

      FrontendAssetsPlugin.prototype.config = {
        frontendAssetsOptions: {
          cacheReset: 'date',
          urlTransformer: function(url, cacheToken) {
            if ((cacheToken != null) && url.charAt(0) === '/') {
              return "/" + cacheToken + url;
            }
            return url;
          }
        }
      };

      FrontendAssetsPlugin.prototype.contextualizeBefore = function(_arg, next) {
        var collection;
        collection = _arg.collection;
        if (this.docpad.getConfig().frontendDebug) {
          collection.forEach(function(file) {
            if (file.type === 'document' && !/\-debug$/.test(file.get('basename'))) {
              return file.set('basename', file.get('basename') + '-debug');
            }
          });
        }
        return next();
      };

      FrontendAssetsPlugin.prototype.generateBefore = function(opts, next) {
        catalog = null;
        return next();
      };

      FrontendAssetsPlugin.prototype.extendTemplateData = function(_arg) {
        var config, docpad, getAssets, templateData;
        templateData = _arg.templateData;
        docpad = this.docpad;
        config = this.config.frontendAssetsOptions;
        getAssets = function(model, prefix) {
          var cacheToken, isDebug, res;
          res = collectResources(model, prefix);
          cacheToken = config.cacheReset || '';
          isDebug = docpad.getConfig().frontendDebug;
          catalog = getCatalog();
          return _.flatten(res.map(function(item) {
            var r;
            if (item in catalog) {
              r = catalog[item];
              if (isDebug) {
                if (prefix === 'css') {
                  return r.files[0];
                } else {
                  return _.map(r.files, function(f) {
                    return f.file;
                  });
                }
              }
              return config.urlTransformer(item, r[cacheToken]);
            }
            return item;
          }));
        };
        return templateData.assets = function(type) {
          return getAssets(this.documentModel, type);
        };
      };

      return FrontendAssetsPlugin;

    })(BasePlugin);
  };

}).call(this);
