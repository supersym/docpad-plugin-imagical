{
  "name": "docpad-plugin-frontend",
  "description": "CSS and JS assets manager, based on Frontend Grunt.js task",
  "version": "1.0.0",
  "keywords": [
    "docpad",
    "docpad-plugin",
    "assets",
    "frontend",
    "font-end",
    "css",
    "js"
  ],
  "author": {
    "name": "Sergey Chikuyonok",
    "email": "serge.che@gmail.com",
    "url": "http://chikuyonok.ru"
  },
  "maintainers": [
    {
      "name": "Sergey Chikuyonok",
      "email": "serge.che@gmail.com",
      "url": "http://chikuyonok.ru"
    }
  ],
  "contributors": [
    {
      "name": "Sergey Chikuyonok",
      "email": "serge.che@gmail.com",
      "url": "http://chikuyonok.ru"
    }
  ],
  "bugs": {
    "url": "https://github.com/sergeche/docpad-plugin-frontend/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sergeche/docpad-plugin-frontend.git"
  },
  "engines": {
    "node": ">=0.4.0",
    "docpad": ">=6.3.x"
  },
  "dependencies": {
    "underscore": "1.3.x"
  },
  "devDependencies": {
    "coffee-script": "1.3.x"
  },
  "main": "./out/frontend.plugin.js",
  "readme": "A [DocPad](https://github.com/bevry/docpad) plugin that manages CSS and JS assets. Combined with Grunt.js’ Frontend task, creates cache-reset links to static files.\n\nThe main reasons to use this plugin are:\n\n* Get compiled by Grunt.js resources and output links to resources with last modified date prefix to effectively reset cache every time resource is re-compiled.\n* Organize resources into sets that can be selectively redefined in templates and documents.\n\n## Installation ##\n\nRun `npm install --save docpad-plugin-frontend` command in your DocPad project root.\n    \n## How it works ##\n\nThis plugin extends template data object with `assets(type)` method. When called inside layout template, returns sorted list of files for specified `type`. The `type` is simply a string identifier of the resource type, for example, `css` or `js`.\n\nWhenever you call `assets(type)` method from template, it will collect resource list of specified type from current document and layout with respect of layout templates inheritance.\n\n## Simple example ##\n\nIn your `layout` template, let’s say `default.html.eco`, define list of CSS and JS resources in document’s meta data. You can separate file entries with with comma:\n\n```html\n---\ncss: \"/css/style.css\"\njs:  \"/js/fileA.js,/js/fileB.js\"\n---\n<!doctype html>\n<html>\n<body>\n    \n</body>\n</html>\n```\n\nIn the same template, use `assets()` method to get list of resources (I’m using [Eco](https://github.com/sstephenson/eco) templates, but you can use any other):\n\n```html\n---\ncss: \"/css/style.css\"\njs:  \"/js/fileA.js,/js/fileB.js\"\n---\n<!doctype html>\n<html>\n<head>\n    <% for url in @assets('css'): %><link rel=\"stylesheet\" href=\"<%= url %>\" /><% end %>\n    <% for url in @assets('js'): %><script src=\"<%= url %>\"></script><% end %>\n</head>\n<body>\n    \n</body>\n</html>\n```\n\nIf you’re using Grunt.js’ Frontend template task, generated file urls may look like this:\n\n```html\n<!doctype html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"/20121101001423/css/style.css\" />\n    <script src=\"/20121101001423/js/fileA.js\"></script>\n    <script src=\"/20121001001129/js/fileB.js\"></script>\n</head>\n<body>\n    \n</body>\n</html>\n```\n\nAs you can see, generated urls contains numeric prefix which is _last compilation date_, taken from build catalog generated by Grunt.js Frontend task. Such prefixes can effectively reset cache from static resources every time this resource is recompiled.\n\n## Organizing resources ##\n\nYou can organize resources into sets that can be overridden by descendant templates or document. All you need is to add numeric suffix to resource type, like this: `css2`, `js10` and so on.\n\nFor example, in `default.html.eco` template you can define the following resource sets in meta data:\n\n    ---\n    js: \"fileA.js\"\n    js2: \"fileB.js,fileC.js\"\n    js3: \"fileD.js\"\n    ---\n\nIn `page.html.eco` template, which inherits `default.html.eco`, you can redefine resource set:\n\n    ---\n    layout: default\n    js2: \"foo.js\"\n    ---\n    \nYou can also redefine resource sets in document that uses one of these templates:\n\n    ---\n    layout: page\n    js3: \"page.js\"\n    ---\n    \nThe final resource list retrieved by  `assets('js')` call for your document will look like this:\n\n    fileA.js\n    foo.js\n    page.js\n    \nAll sets are sorted by numeric suffix.\n\n****************\n\nA real-world example is available in [Emmet Documentation](https://github.com/emmetio/emmet-docs) web-site source.",
  "readmeFilename": "README.md",
  "_id": "docpad-plugin-frontend@1.0.0",
  "_from": "docpad-plugin-frontend@1.x"
}
